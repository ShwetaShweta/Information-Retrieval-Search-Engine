
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.HashMap;

public class TfIdf {
	double totalDoc;
	Logger objLog=new Logger();
	long[] fileSeekPositions;
	ComputeScore objCompute=new ComputeScore();
	public TfIdf(double N){
		totalDoc=N;
	fileSeekPositions = new long[27];
	PopulateFileSeekPositions();
	}	
	private void PopulateFileSeekPositions()
	{
		try
		{
			BufferedReader reader = new BufferedReader(new FileReader("D://PS3//Assignment3_Srividya//fileSeekPos"));
			String line = reader.readLine();
			int i = 0;
			while(line != null)
			{
				fileSeekPositions[i] = Long.parseLong(line);
				line = reader.readLine();
				i++;
			}
			reader.close();
		}
		catch(Exception ex)
		{
			
			//objLog.logMessages(ex.getMessage());
		}
	}
	public String SearchInFile(String term, String fileName,String delimiter) throws IOException
	{
		String postingList = "";
		try
		{
			objLog.logMessages("Loading posting list for '"+term+"'");
			RandomAccessFile indexFile = new RandomAccessFile(fileName,"r");
			int seekInd = term.charAt(0) - 97;
			long start = fileSeekPositions[seekInd];
			long end = fileSeekPositions[seekInd+1];
			
			indexFile.seek(start);
			String line = indexFile.readLine();
			String currentTerm="";
			int index = line.indexOf(delimiter);
			currentTerm = line.substring(0,index);
			if(currentTerm!= "")
			{

				if(currentTerm.compareTo(term)==0)
				{				
					objLog.logMessages("Loading posting list for '"+term+"' complete");

					indexFile.close();
					return line;
				}
				if(currentTerm.compareTo(term)>0)
				{
					indexFile.close();
					return "";
				}
				while(start<=end)
				{
					currentTerm = "";
					long mid = (start/2 +end/2);
					indexFile.seek(mid);
					indexFile.readLine();
					line = indexFile.readLine();
					int ind = line.indexOf(delimiter);
					currentTerm = line.substring(0,ind);
					if(currentTerm != "")
					{
						if(currentTerm.compareTo(term) == 0)
						{
							objLog.logMessages("Loading posting list for '"+term+"' complete");
							indexFile.close();
							return line;

						}
						if(currentTerm.compareTo(term)>0)
						{
							end = mid-1;
						}
						if(currentTerm.compareTo(term)<0)
						{
							start = mid+1;
						}
					}
					else
					{
						indexFile.close();
						return "";
					}
				}
			}
			indexFile.close();
		}
		catch(Exception ex)
		{
			objLog.logMessages(ex);
		}

		return postingList;
	}
	public HashMap<String, Double> getQueryResults(String input) throws IOException{
		input=input.toLowerCase();
		String[] terms=input.split(" ");
		HashMap<String,String> termFile=new HashMap<String,String>(terms.length);
		HashMap<String,HashMap<String,Double>> TFIDF=new HashMap<String,HashMap<String,Double>>();
		for(int i=0;i<terms.length;i++){
			char val=terms[i].charAt(0);
			String filename="D:\\PS3\\letterWise\\"+val+".txt";
            termFile.put(terms[i], filename);
		}
		for(String key:termFile.keySet()){
			String List=SearchInFile(key,termFile.get(key),"#");
			if(List!=""){
				TFIDF.put(key, objCompute.computeTFIDF(List, totalDoc));
			}	
		}
		HashMap<String,Double> hash0=TFIDF.get(terms[0]);
		HashMap<String,Double> Collectivehash=new HashMap<String,Double>();
		for(int l=0;l<terms.length;l++){
			if(TFIDF.containsKey(terms[l])){
				Collectivehash.putAll(objCompute.computeWeight(hash0,TFIDF.get(terms[l])));

			}
		}

		return Collectivehash;
	}

     
	
}

